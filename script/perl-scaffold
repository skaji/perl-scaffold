#!perl
use Mojo::Base -signatures;

use Dist::Zilla::App;
use Mojo::File;
use Mojo::Loader;

package Template {
    use Mojo::Base -base, -signatures;

    use Mojo::File;
    use Mojo::Template;

    has argv => undef;
    has data => undef;
    has tmpl => sub ($self, @) { Mojo::Template->new(vars => 1) };

    sub render ($self, $source, $target) {
        my $file = Mojo::File->new($target);
        $file->dirname->make_path if !-d $file->dirname;
        $file->spurt($self->tmpl->render($self->data->{$source}, $self->argv));
    }
}

sub capture (@cmd) { qx/@cmd/ =~ s/\n\z//r }

die "Usage: $0 MODULE\n" if !@ARGV or $ARGV[0] =~ /^(-h|--help)$/n;

my $module = $ARGV[0] =~ s/(::|-)/::/gr;
my $dist = $module =~ s/::/-/gr;
my $author = capture qw(git config --get user.name);
my $email = capture qw(git config --get user.email);
my $github_user = capture qw(git config --get github.user) or die "missing 'git config --get github.user'\n";
my $year = (localtime)[5] + 1900;

my $tmpl = Template->new(
    argv => { module => $module, dist => $dist, author => $author, email => $email, year => $year },
    data => (Mojo::Loader::data_section __PACKAGE__),
);

my $dir = Mojo::File->new($dist);
die "Already exist $dir\n" if -e $dir;

warn "Creating ./$dir\n";
$dir->make_path;

my @part = split /-/, $dist;
my $last = pop @part;
my $libfile = Mojo::File->new("lib", @part, "$last.pm");

chdir $dir;

$tmpl->render("Module.pm" => $libfile);
$tmpl->render(".github/workflows/test.yml" => ".github/workflows/test.yml");
$tmpl->render(".gitignore" => ".gitignore");
$tmpl->render("Changes" => "Changes");
$tmpl->render("cpm.yml" => "cpm.yml");
$tmpl->render("dist.ini" => "dist.ini");
$tmpl->render("t/00_use.t" => "t/00_use.t");

system "git", "init", "-q", ".";
system "git", "add", ".";
system "git", "remote", "add", "origin", "ssh://git\@github.com/$github_user/$dist.git";
{ local @ARGV = ("build", "--no-tgz"); Dist::Zilla::App->new->run }
system "git", "add", ".";
system "git", "clean", "-xfd";

__DATA__

@@ Changes
Revision history for <%= $dist %>

{{$NEXT}}
  - Initial version

@@ t/00_use.t
use strict;
use warnings;
use Test::More tests => 1;
use <%= $module %>;
pass "happy hacking!";

@@ .gitignore
/<%= $dist %>-*
/.build/

@@ cpm.yml
prereqs:
  runtime:
    requires:
      perl: { version: '5.008001' }

@@ .github/workflows/test.yml
name: test

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        perl-version:
          - '5.8-buster'
          - 'latest'
    container:
      image: perl:${{ matrix.perl-version }}
    steps:
      - uses: actions/checkout@v2
      - run: perl -V
      - name: Install Dependencies
        run: curl -fsSL --compressed https://git.io/cpm | perl - install -g --with-develop --with-recommends --show-build-log-on-failure
      - run: prove -l t
  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - run: perl -V
      - name: Install Dependencies
        run: curl -fsSL https://git.io/cpm | perl - install -g --with-develop --with-recommends --show-build-log-on-failure
      - run: prove -l t

@@ dist.ini
name = <%= $dist %>

[ConfirmRelease]
[CopyFilesFromBuild]
copy = META.json
copy = LICENSE
[CopyFilesFromRelease]
match = \.pm$
[Git::Check]
allow_dirty = Changes
allow_dirty = META.json
[Git::Contributors]
[Git::GatherDir]
exclude_filename = META.json
exclude_filename = LICENSE
[GithubMeta]
issues = 1
[License]
[LicenseFromModule]
override_author = 1
[MetaJSON]
[MetaProvides::Package]
inherit_version = 0
inherit_missing = 0
[ModuleBuildTiny]
[Prereqs::From::cpmfile]
[PruneFiles]
filename = dist.ini
filename = cpm.yml
match = ^(xt|author|maint)/
[ReadmeAnyFromPod]
type = markdown
filename = README.md
location = root
[ReversionOnRelease]
prompt = 1
[StaticInstall]
[TestRelease]
[VersionFromMainModule]

[NextRelease]
format = %v  %{yyyy-MM-dd HH:mm:ss VVV}d%{ (TRIAL RELEASE)}T
[CheckChangesHasContent]
[UploadToCPAN]
;[FakeRelease]
[Git::Commit]
commit_msg = %v
allow_dirty = Changes
allow_dirty = META.json
allow_dirty_match = \.pm$
[Git::Tag]
tag_format = %v
tag_message =
[Git::Push]
[GitHubREADME::Badge]
badges = github_actions/test

@@ Module.pm
package <%= $module %>;
use strict;
use warnings;

our $VERSION = '0.001';


1;
<%# %>__END__

=encoding utf-8

=head1 NAME

<%= $module %> - blah blah blah

=head1 SYNOPSIS

  use <%= $module %>;

=head1 DESCRIPTION

<%= $module %> is

=head1 COPYRIGHT AND LICENSE

Copyright <%= $year %> <%= $author %> <<%= $email %>>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
